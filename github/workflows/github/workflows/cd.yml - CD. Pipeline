# 🧞‍♂️ Digital Genie Secrets - CD Pipeline
name: 🚀 Continuous Deployment

on:
  push:
    tags:
      - 'v*.*.*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'البيئة المستهدفة'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  DOCKER_REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ============================================
  # 🏗️ Build & Push Docker Image
  # ============================================
  build-and-push:
    name: 🐳 Build & Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    outputs:
      version: ${{ steps.meta.outputs.version }}
      tags: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔐 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
      
      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
      
      - name: 🔍 Scan Image for Vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # 🧪 Staging Deployment
  # ============================================
  deploy-staging:
    name: 🏗️ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.digital-genie.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: ⚙️ Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
      
      - name: 🚀 Deploy to Kubernetes
        run: |
          kubectl set image deployment/digital-genie \
            digital-genie=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }} \
            -n staging
          
          kubectl rollout status deployment/digital-genie -n staging
      
      - name: 🧪 Run Smoke Tests
        run: |
          curl -f https://staging.digital-genie.com/health || exit 1
          curl -f https://staging.digital-genie.com/api/v1/status || exit 1
      
      - name: 📢 Notify Slack - Staging
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🏗️ تم النشر على Staging بنجاح!'
          fields: repo,message,commit,author
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # ============================================
  # 🚀 Production Deployment
  # ============================================
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment:
      name: production
      url: https://digital-genie.com
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: ⚙️ Configure kubectl
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
      
      - name: 💾 Backup Current Deployment
        run: |
          kubectl get deployment digital-genie -n production -o yaml > backup-deployment.yaml
      
      - name: 🚀 Deploy to Kubernetes (Blue-Green)
        run: |
          # Deploy new version
          kubectl set image deployment/digital-genie \
            digital-genie=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }} \
            -n production
          
          # Wait for rollout
          kubectl rollout status deployment/digital-genie -n production --timeout=10m
      
      - name: 🧪 Health Check
        run: |
          for i in {1..30}; do
            if curl -f https://digital-genie.com/health; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "⏳ Waiting for service... ($i/30)"
            sleep 10
          done
          echo "❌ Health check failed"
          exit 1
      
      - name: 🧪 Integration Tests
        run: |
          # Run production integration tests
          curl -f https://digital-genie.com/api/v1/status || exit 1
          # Add more tests here
      
      - name: 📊 Update Metrics Dashboard
        run: |
          # Update deployment metrics in Grafana/Prometheus
          echo "Deployment successful at $(date)" >> deployment-log.txt
      
      - name: 📢 Notify Team - Success
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🎉 نشر ناجح على Production!",
              attachments: [{
                color: 'good',
                fields: [
                  { title: 'Version', value: '${{ needs.build-and-push.outputs.version }}', short: true },
                  { title: 'Environment', value: 'Production', short: true },
                  { title: 'URL', value: 'https://digital-genie.com', short: false }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: 🔙 Rollback on Failure
        if: failure()
        run: |
          echo "❌ Deployment failed, rolling back..."
          kubectl apply -f backup-deployment.yaml -n production
          kubectl rollout status deployment/digital-genie -n production
      
      - name: 📧 Send Failure Alert
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: '🚨 فشل النشر على Production'
          body: |
            فشل نشر الإصدار ${{ needs.build-and-push.outputs.version }} على Production.
            يرجى التحقق من السجلات.
          to: ops@digital-genie.com

  # ============================================
  # 📦 Create GitHub Release
  # ============================================
  create-release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📝 Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📦 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## 🎉 ما الجديد في هذا الإصدار
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## 🐳 Docker Image
            ```bash
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
            ```
            
            ## 📚 التوثيق
            [اقرأ التوثيق الكامل](https://docs.digital-genie.com)
            
            ## 🔒 التحديثات الأمنية
            راجع [SECURITY.md](SECURITY.md) للتفاصيل
          draft: false
          prerelease: false
          files: |
            CHANGELOG.md
            LICENSE
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================
  # 📊 Post-Deployment Monitoring
  # ============================================
  post-deployment:
    name: 📊 Post-Deployment
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
      - name: 📈 Update Deployment Dashboard
        run: |
          echo "Updating deployment metrics..."
          # Add Grafana/Prometheus update logic
      
      - name: 🔍 Run Security Scan
        run: |
          echo "Running post-deployment security scan..."
          # Add security scanning logic
      
      - name: 📊 Generate Deployment Report
        run: |
          echo "# Deployment Report" > report.md
          echo "Version: ${{ needs.build-and-push.outputs.version }}" >> report.md
          echo "Timestamp: $(date)" >> report.md
          echo "Status: ${{ job.status }}" >> report.md
      
      - name: 📤 Upload Report
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: report.md

  # ============================================
  # 🧹 Cleanup Old Images
  # ============================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: success()
    
    steps:
      - name: 🗑️ Delete Old Container Images
        uses: actions/delete-package-versions@v5
        with:
          package-name: 'digital-genie-secrets'
          package-type: 'container'
          min-versions-to-keep: 5
          delete-only-untagged-versions: 'true'
