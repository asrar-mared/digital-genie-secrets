# 🧞‍♂️ Digital Genie Secrets - CI Pipeline
name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # تشغيل يومي في الساعة 2 صباحاً
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.7.1'

jobs:
  # ============================================
  # 🔍 Code Quality & Linting
  # ============================================
  code-quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy pylint bandit safety
      
      - name: 🎨 Check Code Formatting (Black)
        run: black --check --diff src/ tests/
      
      - name: 📋 Check Import Sorting (isort)
        run: isort --check-only --diff src/ tests/
      
      - name: 🔍 Lint with Flake8
        run: flake8 src/ tests/ --count --statistics --show-source
      
      - name: 🔎 Type Check with mypy
        run: mypy src/ --ignore-missing-imports
      
      - name: 📊 Analyze with Pylint
        run: pylint src/ --exit-zero --output-format=colorized
        continue-on-error: true
      
      - name: 🔒 Security Check with Bandit
        run: bandit -r src/ -f json -o bandit-report.json
        continue-on-error: true
      
      - name: 🛡️ Dependency Security Check
        run: safety check --json
        continue-on-error: true
      
      - name: 📤 Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json

  # ============================================
  # 🧪 Unit Tests
  # ============================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio pytest-mock
      
      - name: 🧪 Run Unit Tests
        run: |
          pytest tests/unit/ \
            -v \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=test-results.xml
      
      - name: 📊 Upload Coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: |
            test-results.xml
            htmlcov/

  # ============================================
  # 🔗 Integration Tests
  # ============================================
  integration-tests:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: test_db
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: test_user
          MONGO_INITDB_ROOT_PASSWORD: test_pass
        ports:
          - 27017:27017
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
      
      - name: 🔗 Run Integration Tests
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          MONGODB_URL: mongodb://test_user:test_pass@localhost:27017/test_db
        run: |
          pytest tests/integration/ -v --maxfail=3

  # ============================================
  # 🔒 Security Scanning
  # ============================================
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔍 Run Trivy Security Scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📤 Upload Trivy Results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: 🔐 Run Snyk Security Scan
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
      
      - name: 🛡️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'digital-genie-secrets'
          path: '.'
          format: 'HTML'
        continue-on-error: true

  # ============================================
  # 🐳 Docker Build Test
  # ============================================
  docker-build:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐋 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: digital-genie:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: 🧪 Test Docker Image
        run: |
          docker run --rm digital-genie:test python --version
          docker run --rm digital-genie:test python -m pytest --version

  # ============================================
  # 📚 Documentation Build
  # ============================================
  docs-build:
    name: 📚 Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Dependencies
        run: |
          pip install sphinx sphinx-rtd-theme mkdocs mkdocs-material
      
      - name: 🏗️ Build Documentation
        run: |
          cd docs/
          make html
      
      - name: 📤 Upload Documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

  # ============================================
  # 📊 Code Coverage Report
  # ============================================
  coverage-report:
    name: 📊 Coverage Report
    runs-on: ubuntu-latest
    needs: [unit-tests]
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: 📦 Install Dependencies
        run: |
          pip install pytest pytest-cov coverage
      
      - name: 🧪 Run Tests with Coverage
        run: |
          pytest --cov=src --cov-report=json --cov-report=html
      
      - name: 📊 Generate Coverage Badge
        uses: cicirello/jacoco-badge-generator@v2
        with:
          badges-directory: badges
          generate-branches-badge: true
      
      - name: 💬 Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

  # ============================================
  # ✅ Final Status Check
  # ============================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: 
      - code-quality
      - unit-tests
      - integration-tests
      - security-scan
      - docker-build
      - docs-build
    
    steps:
      - name: 🎉 All Checks Passed
        run: |
          echo "✅ جميع الفحوصات نجحت!"
          echo "🎉 CI Pipeline مكتمل بنجاح"
      
      - name: 📢 Send Success Notification
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "✅ CI Pipeline نجح في digital-genie-secrets!",
              attachments: [{
                color: 'good',
                text: `Branch: ${process.env.AS_REF}\nCommit: ${process.env.AS_COMMIT}\nAuthor: ${process.env.AS_AUTHOR}`
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true
