# üßû‚Äç‚ôÇÔ∏è Digital Genie Secrets - Docker Compose Configuration
version: '3.8'

services:
  # ============================================
  # üõ°Ô∏è Main Application
  # ============================================
  digital-genie:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: 3.11
    container_name: digital-genie-app
    image: digital-genie:latest
    restart: unless-stopped
    ports:
      - "8443:8443"      # HTTPS
      - "8080:8080"      # HTTP (redirect to HTTPS)
    environment:
      - ENV=production
      - DEBUG=false
      - DATABASE_URL=postgresql://genie:${DB_PASSWORD}@postgres:5432/digital_genie
      - REDIS_URL=redis://redis:6379/0
      - MONGODB_URL=mongodb://mongo:27017/genie_logs
      - SECRET_KEY=${SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - JWT_SECRET=${JWT_SECRET}
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./uploads:/app/uploads
      - ssl_certs:/app/ssl
    depends_on:
      - postgres
      - redis
      - mongo
    networks:
      - genie-network
    healthcheck:
      test: ["CMD", "curl", "-f", "https://localhost:8443/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # ============================================
  # üóÑÔ∏è PostgreSQL Database
  # ============================================
  postgres:
    image: postgres:16-alpine
    container_name: digital-genie-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=digital_genie
      - POSTGRES_USER=genie
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - genie-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U genie"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G

  # ============================================
  # üî¥ Redis Cache
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: digital-genie-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 512mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - genie-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 512M

  # ============================================
  # üçÉ MongoDB (Logs)
  # ============================================
  mongo:
    image: mongo:7
    container_name: digital-genie-mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=genie_logs
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - genie-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G

  # ============================================
  # üîÑ Celery Worker
  # ============================================
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital-genie-celery
    restart: unless-stopped
    command: celery -A digital_genie.celery worker --loglevel=info --concurrency=4
    environment:
      - ENV=production
      - DATABASE_URL=postgresql://genie:${DB_PASSWORD}@postgres:5432/digital_genie
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - digital-genie
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # ============================================
  # üå∫ Celery Beat (Scheduler)
  # ============================================
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital-genie-beat
    restart: unless-stopped
    command: celery -A digital_genie.celery beat --loglevel=info
    environment:
      - ENV=production
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./config:/app/config:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - celery-worker
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 256M

  # ============================================
  # üå∏ Flower (Celery Monitor)
  # ============================================
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: digital-genie-flower
    restart: unless-stopped
    command: celery -A digital_genie.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - FLOWER_BASIC_AUTH=${FLOWER_USER}:${FLOWER_PASSWORD}
    depends_on:
      - redis
      - celery-worker
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 256M

  # ============================================
  # üìä Prometheus (Metrics)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: digital-genie-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 512M

  # ============================================
  # üìà Grafana (Visualization)
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: digital-genie-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 512M

  # ============================================
  # üîç Elasticsearch (Logs)
  # ============================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: digital-genie-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 1G

  # ============================================
  # üìä Kibana (Log Visualization)
  # ============================================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: digital-genie-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 512M

  # ============================================
  # üåê Nginx (Reverse Proxy)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: digital-genie-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ssl_certs:/etc/nginx/ssl:ro
      - ./static:/usr/share/nginx/html:ro
    depends_on:
      - digital-genie
    networks:
      - genie-network
    deploy:
      resources:
        limits:
          memory: 256M

# ============================================
# üíæ Volumes
# ============================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  ssl_certs:
    driver: local

# ============================================
# üåê Networks
# ============================================
networks:
  genie-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
